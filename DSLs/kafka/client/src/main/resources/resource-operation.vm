#set ($version = "unknown")
#set ($group = "")
#set ($annotations = $model.annotations)
#foreach ($annotation in $annotations)
  #if ($annotation.getClassRef().getName().equals("ApiVersion"))
    #set ($apiGroupVersion = $annotation.getParameters().get("value"))
  #end
  #if ($annotation.getClassRef().getName().equals("ApiGroup"))
    #set ($apiGroupName = $annotation.getParameters().get("value"))
  #end
#end


package io.fabric8.kafka.client.internal;

import io.fabric8.kubernetes.client.Config;
import io.fabric8.kubernetes.client.dsl.Resource;
import io.fabric8.kubernetes.client.dsl.base.HasMetadataOperation;
import io.fabric8.kubernetes.client.dsl.NonNamespaceOperation;
import io.fabric8.kubernetes.client.utils.ApiVersionUtil;
import io.fabric8.kubernetes.client.dsl.base.OperationContext;

import okhttp3.OkHttpClient;

import ${model.packageName}.Doneable${model.name};
import ${model.packageName}.${model.name};
import ${model.packageName}.${model.name}List;
import ${model.packageName}.Doneable${model.name};

import java.util.Map;
import java.util.TreeMap;


public class ${model.name}OperationsImpl extends HasMetadataOperation<${model.name}, ${model.name}List, Doneable${model.name}, Resource<${model.name}, Doneable${model.name}>> {

  public ${model.name}OperationsImpl(OkHttpClient client, Config config) {
    this(new OperationContext().withOkhttpClient(client).withConfig(config));
  }

  public ${model.name}OperationsImpl(OperationContext context) {
    super(context.withApiGroupName("$apiGroupName")
    .withApiGroupVersion("$apiGroupVersion")
    .withPlural("#pluralize ($model.name.toLowerCase())"));
    this.type = ${model.name}.class;
    this.listType = ${model.name}List.class;
    this.doneableType = Doneable${model.name}.class;
  }

  public ${model.name}OperationsImpl newInstance(OperationContext context) {
    return new ${model.name}OperationsImpl(context);
  }
}
